(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{67:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return p})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return l}));var n=a(2),r=a(6),o=(a(0),a(90)),c={title:"GraphDB"},p={unversionedId:"backend/graphDB",id:"backend/graphDB",isDocsHomePage:!1,title:"GraphDB",description:"4. GraphDB",source:"@site/docs\\backend\\graphDB.md",permalink:"/cmmp-docs/backend/graphDB",editUrl:"https://github.com/drosu/creative_mixed-use_matching_platform/edit/master/docs/docs/backend/graphDB.md",sidebar:"someSidebar",previous:{title:"MongoDB",permalink:"/cmmp-docs/backend/mongoDB"},next:{title:"APIs",permalink:"/cmmp-docs/backend/apis"}},i=[{value:"4. GraphDB",id:"4-graphdb",children:[{value:"4.1 GraphDB Dashboard",id:"41-graphdb-dashboard",children:[]},{value:"4.2 Loader/Settings",id:"42-loadersettings",children:[]},{value:"4.3 SPARQL, RDF, and Ontologies",id:"43-sparql-rdf-and-ontologies",children:[]},{value:"4.3.1 RDF",id:"431-rdf",children:[]},{value:"4.3.2 SPARQL",id:"432-sparql",children:[]},{value:"4.3.3 Ontology",id:"433-ontology",children:[]},{value:"4.4 GraphDB Utils",id:"44-graphdb-utils",children:[]}]}],s={rightToc:i};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"4-graphdb"},"4. GraphDB"),Object(o.b)("p",null,"We use GraphDB to store majority of the data. GraphDB is a triplestore database supports RDF and SPARQL, the detail is ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/free/devhub/fundamentals.html"}),"here"),"\nThe servers connects to GraphDB repository ",Object(o.b)("inlineCode",{parentName:"p"},"cmmp")," via ",Object(o.b)("inlineCode",{parentName:"p"},"localhost:7200"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"cmmpTest")," for ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/mocha"}),"test environment")),Object(o.b)("h3",{id:"41-graphdb-dashboard"},"4.1 GraphDB Dashboard"),Object(o.b)("p",null,"GraphDB provides user interface dashboard for manage database repository,\nthe related documentation is ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/documentation/free/quick-start-guide.html"}),"here"),"."),Object(o.b)("h3",{id:"42-loadersettings"},"4.2 Loader/Settings"),Object(o.b)("h4",{id:"421-preload-npm-packages"},"4.2.1 Preload NPM packages"),Object(o.b)("p",null,"First preloading the related NPM packages and utils setting. The extra packages required are ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/graphdb"}),"graphdb"),", ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://nodejs.org/api/fs.html#fs_file_paths"}),"fs"),",\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/node-fetch"}),"node-fetch")," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/form-data"}),"form-data")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const {ServerClient, ServerClientConfig} = require('graphdb').server;\nconst {RepositoryClientConfig, RDFRepositoryClient} = require('graphdb').repository;\nconst {SparqlJsonResultParser, JsonLDParser} = require('graphdb').parser;\nconst {RDFMimeType} = require('graphdb').http;\nconst {graphdb} = require('../config');\nconst fs = require('fs');\nconst fetch = require('node-fetch');\nconst FormData = require('form-data');\nconst {sleep} = require('../utils');\n")),Object(o.b)("h4",{id:"422-graphdb-repository"},"4.2.2 GraphDB Repository"),Object(o.b)("p",null,"Then you can create GraphDB Repository by the following and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/documentation/standard/using-graphdb-with-the-rdf4j-api.html"}),"import RDF4J configuration")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"async function createRepository() {\n  const form = new FormData();\n  form.append('config', fs.createReadStream(__dirname + '/config.ttl'));\n  form.append('location', '');\n  const res = await fetch(graphdb.addr + '/rest/repositories', {\n    method: 'POST',\n    body: form,\n    headers: form.getHeaders()\n  });\n  if (res.status === 500) {\n    throw Error('Fails to create repository: ' + (await res.json()).message);\n  }\n}\n")),Object(o.b)("p",null,"Also, you need to have a function to get the repository, which needed for ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:""}),"load function")," later on"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"async function getRepository() {\n  while (!repository) {\n    await sleep(100);\n  }\n  return repository;\n}\n\n")),Object(o.b)("h4",{id:"423-load-data"},"4.2.3 Load Data"),Object(o.b)("p",null,"Then, we can\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/documentation/standard/loading-data.html"}),"load the RDF data"),"\nto the graphDB."),Object(o.b)("p",null,"Note: ",Object(o.b)("inlineCode",{parentName:"p"},"overwrite")," is set to True when you want to reset the GraphDB data, by default, we always reset data\nwhen run the test in ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/mocha"}),"test environment"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"async function loadInitialData(file, overwrite = !!process.env.test) {\n  const contentType = RDFMimeType.TURTLE;\n  return new Promise((resolve, reject) => {\n    fs.readFile(file, (err, stream) => {\n      repository[overwrite ? 'overwrite' : 'upload'](stream, contentType, null, null)\n        .then(() => resolve())\n        .catch(reason => reject(reason));\n    });\n  });\n}\n")),Object(o.b)("h4",{id:"424-load-graphdb"},"4.2.4 Load GraphDB"),Object(o.b)("p",null,"After the preparation of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/graphDB#421-preload-npm-packages"}),"packages"),",\nfunction of ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/graphDB#421-preload-npm-packages"}),"configurations"),",\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/graphDB#422-graphdb-repository"}),"repositories")," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/graphDB#423-load-data"}),"load data"),",\nwe can load the whole GraphDB module in the loader"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"let dbClient, repository;\n\nasync function load() {\n  const DBName = process.env.test ? \"cmmpTest\" : \"cmmp\"\n\n  const serverConfig = new ServerClientConfig(graphdb.addr, 0, {\n    'Accept': RDFMimeType.SPARQL_RESULTS_JSON\n  });\n  dbClient = new ServerClient(serverConfig);\n  const ids = await dbClient.getRepositoryIDs();\n  if (!ids.includes(DBName)) {\n    await createRepository();\n    console.log(`Repository \\`${DBName}\\` created.`)\n  }\n  const readTimeout = 30000;\n  const writeTimeout = 30000;\n\n  repository = await dbClient.getRepository(DBName,\n    new RepositoryClientConfig([graphdb.addr + `/repositories/${DBName}`], {}, '', readTimeout, writeTimeout));\n\n  // using https://github.com/rubensworks/sparqljson-parse.js\n  repository.registerParser(new SparqlJsonResultParser());\n  repository.registerParser(new JsonLDParser());\n\n  console.log(`GraphDB ${DBName} connected.`);\n\n  await loadInitialData(__dirname + '/../ontologies/creative_mixed-use_ontology.ttl');\n\n  //Namespace\n  await repository.saveNamespace('owl', 'http://www.w3.org/2002/07/owl#');\n  await repository.saveNamespace('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');\n  await repository.saveNamespace('xml', 'http://www.w3.org/XML/1998/namespace');\n  await repository.saveNamespace('xsd', 'http://www.w3.org/2001/XMLSchema#');\n  await repository.saveNamespace('rdfs', 'http://www.w3.org/2000/01/rdf-schema#');\n\n\n  console.log('GraphDB loaded.');\n\n}\n\nmodule.exports = {getRepository, load};\n")),Object(o.b)("p",null,"Note: The namespace is for convenience to build up ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/cmmp-docs/backend/graphDB#432-sparql"}),"SPARQL")," query without duplication."),Object(o.b)("h3",{id:"43-sparql-rdf-and-ontologies"},"4.3 SPARQL, RDF, and Ontologies"),Object(o.b)("h3",{id:"431-rdf"},"4.3.1 RDF"),Object(o.b)("p",null,"Resource Description Framework. You can read details ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/free/devhub/rdfs.html"}),"here")),Object(o.b)("h3",{id:"432-sparql"},"4.3.2 SPARQL"),Object(o.b)("p",null,"SPARQL is a powerful query language.  You can read details ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/free/devhub/sparql.html"}),"here")),Object(o.b)("h3",{id:"433-ontology"},"4.3.3 Ontology"),Object(o.b)("p",null,"The description of ontology can refer to ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"http://graphdb.ontotext.com/free/devhub/ontologies.html#what-is-an-ontology"}),"here")),Object(o.b)("h3",{id:"44-graphdb-utils"},"4.4 GraphDB Utils"),Object(o.b)("p",null,"We develop a tool by an object oriented way which can create GraphDB model and manipulate more conveniently. It create and execute the SPARQL query\ninternally."),Object(o.b)("h4",{id:"441-create-a-model"},"4.4.1 Create a Model"),Object(o.b)("p",null,"You can create a GraphDBModel from the functionality of ",Object(o.b)("inlineCode",{parentName:"p"},"utils/graphDB/graphDBSchema.js")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"})," const PrimaryContactModel = GraphDBModel({\n    first_name: String,\n    last_name: String,\n    position: String,\n    telephone: String,\n    telephone_ext: String,\n    email: String,\n  }, {\n    rdfTypes: [Types.NamedIndividual, ':primary_contact_test'],\n    name: 'primary_contact_test'\n  });\n")),Object(o.b)("h4",{id:"442-add-new-data-in-graphdb"},"4.4.2 Add new data in GraphDB"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const newPrimaryContact = await PrimaryContactModel(\n    first_name: "Test",\n    last_name: "User",\n    position: "Software Developer",\n    telephone: "1234567890",\n    telephone_ext: "123",\n    email: "testuser@example.com",\n  })\n')),Object(o.b)("p",null,"Then you can get the SPARQL Query in the following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'PREFIX : <http://cmmp#>\nINSERT DATA {\n    :primary_contact_1 rdf:type owl:NamedIndividual, :primary_contact;\n                       :has_first_name "Test";\n                       :has_last_name "User";\n                       :has_position "Software Developer";\n                       :has_email "testuser@example.com";\n                       :has_telephone "1234567890";\n                       :has_telephone_ext "123".\n}\n')),Object(o.b)("h4",{id:"443-search-data"},"4.4.3 Search Data"),Object(o.b)("p",null,"You can the function with related SPARQL query in the following, respectively"),Object(o.b)("p",null,"Find all of the primary contact"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"const all_primary_contact = PrimaryContactModel.find({})\n")),Object(o.b)("p",null,"SPARQL:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"PREFIX : <http://cmmp#>\nCONSTRUCT {\n    ?s ?p0 ?o0\n} WHERE {\n    ?s ?p0 ?o0.\n    ?s rdf:type owl:NamedIndividual, :primary_contact.\n}\n")),Object(o.b)("p",null,"Find all of the primary contact matches the first name ",Object(o.b)("inlineCode",{parentName:"p"},"Test")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const primary_contacts_with_first_name = PrimaryContactModel.find({first_name: "Test"})\n')),Object(o.b)("p",null,"SPARQL:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'PREFIX : <http://cmmp#>\nCONSTRUCT {\n    ?s ?p0 ?o0\n} WHERE {\n    ?s ?p0 ?o0.\n    ?s rdf:type owl:NamedIndividual, :primary_contact.\n    ?s :has_first_name ?o0_0.\n    FILTER(?o0_0 = "Test")\n}\n')),Object(o.b)("p",null,"Find one primary contact matches the email ",Object(o.b)("inlineCode",{parentName:"p"},"testuser@example.com")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const primary_contact_with_email = PrimaryContactModel.find({first_name: "Test", email: "testuser@example.com"})\n')),Object(o.b)("p",null,"SPARQL:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),'PREFIX : <http://cmmp#>\nCONSTRUCT {\n    ?s ?p0 ?o0\n} WHERE {\n    ?s ?p0 ?o0.\n    ?s rdf:type owl:NamedIndividual, :primary_contact.\n    ?s :has_first_name ?o0_0.\n    FILTER(?o0_0 = "Test")\n    ?s :has_email ?o0_3.\n    FILTER(?o0_3 = "testuser@example.com")\n}\n\n')),Object(o.b)("h4",{id:"444-updatedelete-data"},"4.4.4 Update/Delete Data"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"// WIP......\n")))}l.isMDXComponent=!0},90:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),l=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},d=function(e){var t=l(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,h=d["".concat(c,".").concat(m)]||d[m]||b[m]||o;return a?r.a.createElement(h,p(p({ref:t},s),{},{components:a})):r.a.createElement(h,p({ref:t},s))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:n,c[1]=p;for(var s=2;s<o;s++)c[s]=a[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
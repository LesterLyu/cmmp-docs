(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return d}));var o=t(2),a=t(6),r=(t(0),t(89)),c={title:"MongoDB"},l={unversionedId:"backend/mongoDB",id:"backend/mongoDB",isDocsHomePage:!1,title:"MongoDB",description:"3. MongoDB",source:"@site/docs\\backend\\mongoDB.md",permalink:"/cmmp-docs/backend/mongoDB",editUrl:"https://github.com/drosu/creative_mixed-use_matching_platform/edit/master/docs/docs/backend/mongoDB.md",sidebar:"someSidebar",previous:{title:"Express",permalink:"/cmmp-docs/backend/express"},next:{title:"GraphDB",permalink:"/cmmp-docs/backend/graphDB"}},i=[{value:"3. MongoDB",id:"3-mongodb",children:[{value:"3.1 Mongoose",id:"31-mongoose",children:[]},{value:"3.2 Grid-FS",id:"32-grid-fs",children:[]},{value:"3.3 MongoDB Compass",id:"33-mongodb-compass",children:[]}]}],s={rightToc:i};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"3-mongodb"},"3. MongoDB"),Object(r.b)("p",null,"We use MongoDB to store user account information and files"),Object(r.b)("h3",{id:"31-mongoose"},"3.1 Mongoose"),Object(r.b)("p",null,"We use Mongoose for modeling the data, is an object modeling tool for MongoDB.\nThe reference is  ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://mongoosejs.com/"}),"here")),Object(r.b)("h4",{id:"311-preload"},"3.1.1 Preload"),Object(r.b)("p",null,"To preload the model, firstly import the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:""}),"configuration"),". Also import the mongoose npm module"),Object(r.b)("p",null,"File location: ",Object(r.b)("inlineCode",{parentName:"p"},"loaders\\mongoDB.js")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const config = require('../config');\nconst {sleep} = require('../utils')\n\nconst mongoose = require('mongoose');\n\nmongoose.connect(config.mongodb.addr, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false,\n  useCreateIndex: true,\n});\n")),Object(r.b)("p",null,"Then, connect to MongoDB and add an error handler. Also, we need to get log from console to make sure MongoDB is connected."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"mongoose.connect(config.mongodb.addr, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useFindAndModify: false,\n  useCreateIndex: true,\n});\n\nconst db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function () {\n  // we're connected!\n  console.log('MongoDB connected.')\n\n});\n")),Object(r.b)("h4",{id:"312-modeling"},"3.1.2 Modeling"),Object(r.b)("p",null,"To create a mongoDB model by Mongoose, you can do the following:"),Object(r.b)("p",null,"First, in a class file of ",Object(r.b)("inlineCode",{parentName:"p"},"/model")," folder, load the mooge NPM package"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n")),Object(r.b)("p",null,"Create a schema:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const UserSchema = new Schema({\n  username: {type: String, unique: true, required: true},\n  email: String,\n}, {timestamps: {createdAt: 'created_at', updatedAt: 'updated_at'}});\n")),Object(r.b)("p",null,"Model the schema:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'const MongoDBUserModel = mongoose.model("User", UserSchema, "User");\n')),Object(r.b)("p",null,"Then you can insert the data in the database by following the schema:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'const mongoDBModel = new MongoDBUserModel({\n            username: "exampleuser",\n            email: "test@example.com",\n          })\nawait mongoDBModel.save()\n')),Object(r.b)("p",null,"If you want to see other detail you need, you can view the reference ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://mongoosejs.com/docs/schematypes.html"}),"here"),"."),Object(r.b)("h4",{id:"313-queries"},"3.1.3 Queries"),Object(r.b)("p",null,"Mongoose provides functions to find, update and delete data, the following are examples"),Object(r.b)("p",null,"Find all"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const users = await MongoDBUserModel.find({})\n")),Object(r.b)("p",null,"Find one specific by condition"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'const user = await MongoDBUserModel.findOne({username: "exampleuser",\n                                             email: "test@example.com"})\n')),Object(r.b)("p",null,"Update data by condition"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'await MongoDBUserModel.findOneAndUpdate({username: "exampleuser"}, {email: "test2@example.com"})\n')),Object(r.b)("p",null,"Delete data by condition"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),'const user = await MongoDBUserModel.deleteOne({username: "exampleuser",\n                                             email: "test@example.com"})\n')),Object(r.b)("p",null,"If you want to see other details you need, you can view the reference\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://mongoosejs.com/docs/schematypes.html"}),"here"),"."),Object(r.b)("h3",{id:"32-grid-fs"},"3.2 Grid-FS"),Object(r.b)("p",null,"Grid-FS is a file storage tool for MongoDB, the reference is ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.mongodb.com/manual/core/gridfs/"}),"here"),". For\nMongoose, we use ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.npmjs.com/package/mongoose-gridfs"}),"Mongoose GridFS"),"."),Object(r.b)("h4",{id:"321-setting-and-preload"},"3.2.1 Setting and preload"),Object(r.b)("p",null,"In the mongodb loader file ",Object(r.b)("inlineCode",{parentName:"p"},"\\loaders\\mongoDB.js"),", on top of the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:""}),"original loader setting"),", import the NPM package"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const {createModel} = require('mongoose-gridfs');\n")),Object(r.b)("p",null,"Load the attachment"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"let Attachment;\ndb.once('open', function () {\n  ...\n\n  // initialize GridFS\n  Attachment = createModel({\n    modelName: 'Attachment',\n    connection: db\n  });\n});\n")),Object(r.b)("p",null,"Implement a asynchronous function and load the attachment"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"async function getAttachment() {\n  while (!Attachment) {\n    await sleep(100);\n  }\n  return Attachment;\n}\n\nmodule.exports = {getAttachment};\n")),Object(r.b)("p",null,"After that, we can implement the function to be able to upload and download file\nfrom MongoDB."),Object(r.b)("h4",{id:"322-upload-file"},"3.2.2 Upload file"),Object(r.b)("p",null,"The following is the implementation of upload file, you can read details ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html"}),"here")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const Attachment = await getAttachment();\n    let closedByServer;\n\n    const writeStream = Attachment.bucket.writeFile({filename, contentType}, readStream);\n\n    return new Promise((resolve, reject) => {\n\n      // Only store the record when the actual file is stored in MongoDB.\n      writeStream.on('finish', async (file) => {\n        const fileData = new MongoDBFileModel({fileId: file._id});\n        await fileData.save();\n        closedByServer = true;\n        resolve(file._id);\n      });\n\n      writeStream.on('error', reject);\n\n      // if the client or server aborted the request\n      readStream.on('close', () => {\n        // If the client aborted the connection, abort the write steam.\n        // This will also cleanup the data already wrote to MongoDB.\n        if (!closedByServer)\n          writeStream.abort();\n      });\n\n      readStream.on('error', reject);\n    })\n")),Object(r.b)("p",null,"After the file is uploaded, it will be given file ID to help with getting the file later on. To save the file ID, we can\ncreate different mongoDB model to store the file ID."),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"const MongoDBFileSchema = Schema({\n  fileId: {type: String, unique: true},\n  uploadDate: {type: Date, default: Date.now()}\n});\n\nconst MongoDBFileModel = mongoose.model('MongoDBFile', MongoDBFileSchema, 'MongoDBFile')\n")),Object(r.b)("h4",{id:"323-get-file"},"3.2.3 Get file"),Object(r.b)("p",null,"The following is the implementation of download file, you can read details ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://mongodb.github.io/node-mongodb-native/2.1/api/GridFSBucketWriteStream.html"}),"here")),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-javascript"}),"async function getFile(req, res, next) {\n    const {fileId} = req.params;\n    \n    const Attachment = await getAttachment()\n    try {\n      const file = await Attachment.findById(fileId);\n      const readStream = Attachment.bucket.readFile({_id: ObjectId(fileId)})\n    \n      res.set('Content-Type', file.contentType);\n      readStream.pipe(res).on('error', function (err) {\n        res.json({error: err})\n      })\n    } catch (e) {\n      next(e);\n    }\n}\n")),Object(r.b)("h3",{id:"33-mongodb-compass"},"3.3 MongoDB Compass"),Object(r.b)("p",null,"MongoDB Compass provides a user-friendly UI to visualize the MongoDB, you can view the detail\n",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.mongodb.com/compass/master/"}),"here"),"."))}d.isMDXComponent=!0},89:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var o=t(0),a=t.n(o);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),d=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=d(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),b=d(t),m=o,u=b["".concat(c,".").concat(m)]||b[m]||p[m]||r;return t?a.a.createElement(u,l(l({ref:n},s),{},{components:t})):a.a.createElement(u,l({ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,c=new Array(r);c[0]=m;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,c[1]=l;for(var s=2;s<r;s++)c[s]=t[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);